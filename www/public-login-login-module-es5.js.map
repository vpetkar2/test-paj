{"version":3,"sources":["node_modules/@ngx-translate/core/fesm2015/ngx-translate-core.js","node_modules/@ngx-translate/http-loader/fesm2015/ngx-translate-http-loader.js","src/app/public/login/login.page.html","src/app/public/login/login.module.ts","src/app/public/login/login.page.scss","src/app/public/login/login.page.ts","src/app/shared/language/language.module.ts","src/app/translate-config.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, EventEmitter, InjectionToken, Inject, Directive, ElementRef, ChangeDetectorRef, Input, Pipe, NgModule } from '@angular/core';\nimport { of, isObservable, forkJoin, concat, defer } from 'rxjs';\nimport { take, shareReplay, map, concatMap, switchMap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass TranslateLoader {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} lang\n     * @return {?}\n     */\n    TranslateLoader.prototype.getTranslation = function (lang) { };\n}\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\nclass TranslateFakeLoader extends TranslateLoader {\n    /**\n     * @param {?} lang\n     * @return {?}\n     */\n    getTranslation(lang) {\n        return of({});\n    }\n}\nTranslateFakeLoader.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction MissingTranslationHandlerParams() { }\nif (false) {\n    /**\n     * the key that's missing in translation files\n     * @type {?}\n     */\n    MissingTranslationHandlerParams.prototype.key;\n    /**\n     * an instance of the service that was unable to translate the key.\n     * @type {?}\n     */\n    MissingTranslationHandlerParams.prototype.translateService;\n    /**\n     * interpolation params that were passed along for translating the given key.\n     * @type {?|undefined}\n     */\n    MissingTranslationHandlerParams.prototype.interpolateParams;\n}\n/**\n * @abstract\n */\nclass MissingTranslationHandler {\n}\nif (false) {\n    /**\n     * A function that handles missing translations.\n     *\n     * @abstract\n     * @param {?} params context for resolving a missing translation\n     * @return {?} a value or an observable\n     * If it returns a value, then this value is used.\n     * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\n     * If it doesn't return then the key will be used as a value\n     */\n    MissingTranslationHandler.prototype.handle = function (params) { };\n}\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\nclass FakeMissingTranslationHandler {\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    handle(params) {\n        return params.key;\n    }\n}\nFakeMissingTranslationHandler.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/* tslint:disable */\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param {?} o1 Object or value to compare.\n * @param {?} o2 Object or value to compare.\n * @return {?} true if arguments are equal.\n */\nfunction equals(o1, o2) {\n    if (o1 === o2)\n        return true;\n    if (o1 === null || o2 === null)\n        return false;\n    if (o1 !== o1 && o2 !== o2)\n        return true; // NaN === NaN\n    // NaN === NaN\n    /** @type {?} */\n    let t1 = typeof o1;\n    /** @type {?} */\n    let t2 = typeof o2;\n    /** @type {?} */\n    let length;\n    /** @type {?} */\n    let key;\n    /** @type {?} */\n    let keySet;\n    if (t1 == t2 && t1 == 'object') {\n        if (Array.isArray(o1)) {\n            if (!Array.isArray(o2))\n                return false;\n            if ((length = o1.length) == o2.length) {\n                for (key = 0; key < length; key++) {\n                    if (!equals(o1[key], o2[key]))\n                        return false;\n                }\n                return true;\n            }\n        }\n        else {\n            if (Array.isArray(o2)) {\n                return false;\n            }\n            keySet = Object.create(null);\n            for (key in o1) {\n                if (!equals(o1[key], o2[key])) {\n                    return false;\n                }\n                keySet[key] = true;\n            }\n            for (key in o2) {\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}\n/* tslint:enable */\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isDefined(value) {\n    return typeof value !== 'undefined' && value !== null;\n}\n/**\n * @param {?} item\n * @return {?}\n */\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n/**\n * @param {?} target\n * @param {?} source\n * @return {?}\n */\nfunction mergeDeep(target, source) {\n    /** @type {?} */\n    let output = Object.assign({}, target);\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach((/**\n         * @param {?} key\n         * @return {?}\n         */\n        (key) => {\n            if (isObject(source[key])) {\n                if (!(key in target)) {\n                    Object.assign(output, { [key]: source[key] });\n                }\n                else {\n                    output[key] = mergeDeep(target[key], source[key]);\n                }\n            }\n            else {\n                Object.assign(output, { [key]: source[key] });\n            }\n        }));\n    }\n    return output;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass TranslateParser {\n}\nif (false) {\n    /**\n     * Interpolates a string to replace parameters\n     * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\n     * @abstract\n     * @param {?} expr\n     * @param {?=} params\n     * @return {?}\n     */\n    TranslateParser.prototype.interpolate = function (expr, params) { };\n    /**\n     * Gets a value from an object by composed key\n     * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\n     * @abstract\n     * @param {?} target\n     * @param {?} key\n     * @return {?}\n     */\n    TranslateParser.prototype.getValue = function (target, key) { };\n}\nclass TranslateDefaultParser extends TranslateParser {\n    constructor() {\n        super(...arguments);\n        this.templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n    }\n    /**\n     * @param {?} expr\n     * @param {?=} params\n     * @return {?}\n     */\n    interpolate(expr, params) {\n        /** @type {?} */\n        let result;\n        if (typeof expr === 'string') {\n            result = this.interpolateString(expr, params);\n        }\n        else if (typeof expr === 'function') {\n            result = this.interpolateFunction(expr, params);\n        }\n        else {\n            // this should not happen, but an unrelated TranslateService test depends on it\n            result = (/** @type {?} */ (expr));\n        }\n        return result;\n    }\n    /**\n     * @param {?} target\n     * @param {?} key\n     * @return {?}\n     */\n    getValue(target, key) {\n        /** @type {?} */\n        let keys = typeof key === 'string' ? key.split('.') : [key];\n        key = '';\n        do {\n            key += keys.shift();\n            if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n                target = target[key];\n                key = '';\n            }\n            else if (!keys.length) {\n                target = undefined;\n            }\n            else {\n                key += '.';\n            }\n        } while (keys.length);\n        return target;\n    }\n    /**\n     * @private\n     * @param {?} fn\n     * @param {?=} params\n     * @return {?}\n     */\n    interpolateFunction(fn, params) {\n        return fn(params);\n    }\n    /**\n     * @private\n     * @param {?} expr\n     * @param {?=} params\n     * @return {?}\n     */\n    interpolateString(expr, params) {\n        if (!params) {\n            return expr;\n        }\n        return expr.replace(this.templateMatcher, (/**\n         * @param {?} substring\n         * @param {?} b\n         * @return {?}\n         */\n        (substring, b) => {\n            /** @type {?} */\n            let r = this.getValue(params, b);\n            return isDefined(r) ? r : substring;\n        }));\n    }\n}\nTranslateDefaultParser.decorators = [\n    { type: Injectable }\n];\nif (false) {\n    /** @type {?} */\n    TranslateDefaultParser.prototype.templateMatcher;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n */\nclass TranslateCompiler {\n}\nif (false) {\n    /**\n     * @abstract\n     * @param {?} value\n     * @param {?} lang\n     * @return {?}\n     */\n    TranslateCompiler.prototype.compile = function (value, lang) { };\n    /**\n     * @abstract\n     * @param {?} translations\n     * @param {?} lang\n     * @return {?}\n     */\n    TranslateCompiler.prototype.compileTranslations = function (translations, lang) { };\n}\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\nclass TranslateFakeCompiler extends TranslateCompiler {\n    /**\n     * @param {?} value\n     * @param {?} lang\n     * @return {?}\n     */\n    compile(value, lang) {\n        return value;\n    }\n    /**\n     * @param {?} translations\n     * @param {?} lang\n     * @return {?}\n     */\n    compileTranslations(translations, lang) {\n        return translations;\n    }\n}\nTranslateFakeCompiler.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TranslateStore {\n    constructor() {\n        /**\n         * The lang currently used\n         */\n        this.currentLang = this.defaultLang;\n        /**\n         * a list of translations per lang\n         */\n        this.translations = {};\n        /**\n         * an array of langs\n         */\n        this.langs = [];\n        /**\n         * An EventEmitter to listen to translation change events\n         * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n         *     // do something\n         * });\n         */\n        this.onTranslationChange = new EventEmitter();\n        /**\n         * An EventEmitter to listen to lang change events\n         * onLangChange.subscribe((params: LangChangeEvent) => {\n         *     // do something\n         * });\n         */\n        this.onLangChange = new EventEmitter();\n        /**\n         * An EventEmitter to listen to default lang change events\n         * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n         *     // do something\n         * });\n         */\n        this.onDefaultLangChange = new EventEmitter();\n    }\n}\nif (false) {\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     * @type {?}\n     */\n    TranslateStore.prototype.defaultLang;\n    /**\n     * The lang currently used\n     * @type {?}\n     */\n    TranslateStore.prototype.currentLang;\n    /**\n     * a list of translations per lang\n     * @type {?}\n     */\n    TranslateStore.prototype.translations;\n    /**\n     * an array of langs\n     * @type {?}\n     */\n    TranslateStore.prototype.langs;\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     * @type {?}\n     */\n    TranslateStore.prototype.onTranslationChange;\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {?}\n     */\n    TranslateStore.prototype.onLangChange;\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @type {?}\n     */\n    TranslateStore.prototype.onDefaultLangChange;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst USE_STORE = new InjectionToken('USE_STORE');\n/** @type {?} */\nconst USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\n/** @type {?} */\nconst DEFAULT_LANGUAGE = new InjectionToken('DEFAULT_LANGUAGE');\n/** @type {?} */\nconst USE_EXTEND = new InjectionToken('USE_EXTEND');\n/**\n * @record\n */\nfunction TranslationChangeEvent() { }\nif (false) {\n    /** @type {?} */\n    TranslationChangeEvent.prototype.translations;\n    /** @type {?} */\n    TranslationChangeEvent.prototype.lang;\n}\n/**\n * @record\n */\nfunction LangChangeEvent() { }\nif (false) {\n    /** @type {?} */\n    LangChangeEvent.prototype.lang;\n    /** @type {?} */\n    LangChangeEvent.prototype.translations;\n}\n/**\n * @record\n */\nfunction DefaultLangChangeEvent() { }\nif (false) {\n    /** @type {?} */\n    DefaultLangChangeEvent.prototype.lang;\n    /** @type {?} */\n    DefaultLangChangeEvent.prototype.translations;\n}\nclass TranslateService {\n    /**\n     *\n     * @param {?} store an instance of the store (that is supposed to be unique)\n     * @param {?} currentLoader An instance of the loader currently used\n     * @param {?} compiler An instance of the compiler currently used\n     * @param {?} parser An instance of the parser currently used\n     * @param {?} missingTranslationHandler A handler for missing translations.\n     * @param {?=} useDefaultLang whether we should use default language translation when current language translation is missing.\n     * @param {?=} isolate whether this service should use the store or not\n     * @param {?=} extend To make a child module extend (and use) translations from parent modules.\n     * @param {?=} defaultLanguage Set the default language using configuration\n     */\n    constructor(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang = true, isolate = false, extend = false, defaultLanguage) {\n        this.store = store;\n        this.currentLoader = currentLoader;\n        this.compiler = compiler;\n        this.parser = parser;\n        this.missingTranslationHandler = missingTranslationHandler;\n        this.useDefaultLang = useDefaultLang;\n        this.isolate = isolate;\n        this.extend = extend;\n        this.pending = false;\n        this._onTranslationChange = new EventEmitter();\n        this._onLangChange = new EventEmitter();\n        this._onDefaultLangChange = new EventEmitter();\n        this._langs = [];\n        this._translations = {};\n        this._translationRequests = {};\n        /** set the default language from configuration */\n        if (defaultLanguage) {\n            this.setDefaultLang(defaultLanguage);\n        }\n    }\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n     * @return {?}\n     */\n    get onTranslationChange() {\n        return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n    }\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n     * @return {?}\n     */\n    get onLangChange() {\n        return this.isolate ? this._onLangChange : this.store.onLangChange;\n    }\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n     * @return {?}\n     */\n    get onDefaultLangChange() {\n        return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n    }\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     * @return {?}\n     */\n    get defaultLang() {\n        return this.isolate ? this._defaultLang : this.store.defaultLang;\n    }\n    /**\n     * @param {?} defaultLang\n     * @return {?}\n     */\n    set defaultLang(defaultLang) {\n        if (this.isolate) {\n            this._defaultLang = defaultLang;\n        }\n        else {\n            this.store.defaultLang = defaultLang;\n        }\n    }\n    /**\n     * The lang currently used\n     * @return {?}\n     */\n    get currentLang() {\n        return this.isolate ? this._currentLang : this.store.currentLang;\n    }\n    /**\n     * @param {?} currentLang\n     * @return {?}\n     */\n    set currentLang(currentLang) {\n        if (this.isolate) {\n            this._currentLang = currentLang;\n        }\n        else {\n            this.store.currentLang = currentLang;\n        }\n    }\n    /**\n     * an array of langs\n     * @return {?}\n     */\n    get langs() {\n        return this.isolate ? this._langs : this.store.langs;\n    }\n    /**\n     * @param {?} langs\n     * @return {?}\n     */\n    set langs(langs) {\n        if (this.isolate) {\n            this._langs = langs;\n        }\n        else {\n            this.store.langs = langs;\n        }\n    }\n    /**\n     * a list of translations per lang\n     * @return {?}\n     */\n    get translations() {\n        return this.isolate ? this._translations : this.store.translations;\n    }\n    /**\n     * @param {?} translations\n     * @return {?}\n     */\n    set translations(translations) {\n        if (this.isolate) {\n            this._translations = translations;\n        }\n        else {\n            this.store.translations = translations;\n        }\n    }\n    /**\n     * Sets the default language to use as a fallback\n     * @param {?} lang\n     * @return {?}\n     */\n    setDefaultLang(lang) {\n        if (lang === this.defaultLang) {\n            return;\n        }\n        /** @type {?} */\n        let pending = this.retrieveTranslations(lang);\n        if (typeof pending !== \"undefined\") {\n            // on init set the defaultLang immediately\n            if (this.defaultLang == null) {\n                this.defaultLang = lang;\n            }\n            pending.pipe(take(1))\n                .subscribe((/**\n             * @param {?} res\n             * @return {?}\n             */\n            (res) => {\n                this.changeDefaultLang(lang);\n            }));\n        }\n        else { // we already have this language\n            this.changeDefaultLang(lang);\n        }\n    }\n    /**\n     * Gets the default language used\n     * @return {?}\n     */\n    getDefaultLang() {\n        return this.defaultLang;\n    }\n    /**\n     * Changes the lang currently used\n     * @param {?} lang\n     * @return {?}\n     */\n    use(lang) {\n        // don't change the language if the language given is already selected\n        if (lang === this.currentLang) {\n            return of(this.translations[lang]);\n        }\n        /** @type {?} */\n        let pending = this.retrieveTranslations(lang);\n        if (typeof pending !== \"undefined\") {\n            // on init set the currentLang immediately\n            if (!this.currentLang) {\n                this.currentLang = lang;\n            }\n            pending.pipe(take(1))\n                .subscribe((/**\n             * @param {?} res\n             * @return {?}\n             */\n            (res) => {\n                this.changeLang(lang);\n            }));\n            return pending;\n        }\n        else { // we have this language, return an Observable\n            this.changeLang(lang);\n            return of(this.translations[lang]);\n        }\n    }\n    /**\n     * Retrieves the given translations\n     * @private\n     * @param {?} lang\n     * @return {?}\n     */\n    retrieveTranslations(lang) {\n        /** @type {?} */\n        let pending;\n        // if this language is unavailable or extend is true, ask for it\n        if (typeof this.translations[lang] === \"undefined\" || this.extend) {\n            this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n            pending = this._translationRequests[lang];\n        }\n        return pending;\n    }\n    /**\n     * Gets an object of translations for a given language with the current loader\n     * and passes it through the compiler\n     * @param {?} lang\n     * @return {?}\n     */\n    getTranslation(lang) {\n        this.pending = true;\n        /** @type {?} */\n        const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(shareReplay(1), take(1));\n        this.loadingTranslations = loadingTranslations.pipe(map((/**\n         * @param {?} res\n         * @return {?}\n         */\n        (res) => this.compiler.compileTranslations(res, lang))), shareReplay(1), take(1));\n        this.loadingTranslations\n            .subscribe({\n            next: (/**\n             * @param {?} res\n             * @return {?}\n             */\n            (res) => {\n                this.translations[lang] = this.extend && this.translations[lang] ? Object.assign(Object.assign({}, res), this.translations[lang]) : res;\n                this.updateLangs();\n                this.pending = false;\n            }),\n            error: (/**\n             * @param {?} err\n             * @return {?}\n             */\n            (err) => {\n                this.pending = false;\n            })\n        });\n        return loadingTranslations;\n    }\n    /**\n     * Manually sets an object of translations for a given language\n     * after passing it through the compiler\n     * @param {?} lang\n     * @param {?} translations\n     * @param {?=} shouldMerge\n     * @return {?}\n     */\n    setTranslation(lang, translations, shouldMerge = false) {\n        translations = this.compiler.compileTranslations(translations, lang);\n        if ((shouldMerge || this.extend) && this.translations[lang]) {\n            this.translations[lang] = mergeDeep(this.translations[lang], translations);\n        }\n        else {\n            this.translations[lang] = translations;\n        }\n        this.updateLangs();\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Returns an array of currently available langs\n     * @return {?}\n     */\n    getLangs() {\n        return this.langs;\n    }\n    /**\n     * Add available langs\n     * @param {?} langs\n     * @return {?}\n     */\n    addLangs(langs) {\n        langs.forEach((/**\n         * @param {?} lang\n         * @return {?}\n         */\n        (lang) => {\n            if (this.langs.indexOf(lang) === -1) {\n                this.langs.push(lang);\n            }\n        }));\n    }\n    /**\n     * Update the list of available langs\n     * @private\n     * @return {?}\n     */\n    updateLangs() {\n        this.addLangs(Object.keys(this.translations));\n    }\n    /**\n     * Returns the parsed result of the translations\n     * @param {?} translations\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?}\n     */\n    getParsedResult(translations, key, interpolateParams) {\n        /** @type {?} */\n        let res;\n        if (key instanceof Array) {\n            /** @type {?} */\n            let result = {};\n            /** @type {?} */\n            let observables = false;\n            for (let k of key) {\n                result[k] = this.getParsedResult(translations, k, interpolateParams);\n                if (isObservable(result[k])) {\n                    observables = true;\n                }\n            }\n            if (observables) {\n                /** @type {?} */\n                const sources = key.map((/**\n                 * @param {?} k\n                 * @return {?}\n                 */\n                k => isObservable(result[k]) ? result[k] : of((/** @type {?} */ (result[k])))));\n                return forkJoin(sources).pipe(map((/**\n                 * @param {?} arr\n                 * @return {?}\n                 */\n                (arr) => {\n                    /** @type {?} */\n                    let obj = {};\n                    arr.forEach((/**\n                     * @param {?} value\n                     * @param {?} index\n                     * @return {?}\n                     */\n                    (value, index) => {\n                        obj[key[index]] = value;\n                    }));\n                    return obj;\n                })));\n            }\n            return result;\n        }\n        if (translations) {\n            res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n        }\n        if (typeof res === \"undefined\" && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n            res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n        }\n        if (typeof res === \"undefined\") {\n            /** @type {?} */\n            let params = { key, translateService: this };\n            if (typeof interpolateParams !== 'undefined') {\n                params.interpolateParams = interpolateParams;\n            }\n            res = this.missingTranslationHandler.handle(params);\n        }\n        return typeof res !== \"undefined\" ? res : key;\n    }\n    /**\n     * Gets the translated value of a key (or an array of keys)\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} the translated key, or an object of translated keys\n     */\n    get(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        // check if we are loading a new translation to use\n        if (this.pending) {\n            return this.loadingTranslations.pipe(concatMap((/**\n             * @param {?} res\n             * @return {?}\n             */\n            (res) => {\n                res = this.getParsedResult(res, key, interpolateParams);\n                return isObservable(res) ? res : of(res);\n            })));\n        }\n        else {\n            /** @type {?} */\n            let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n            return isObservable(res) ? res : of(res);\n        }\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the translation changes.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} A stream of the translated key, or an object of translated keys\n     */\n    getStreamOnTranslationChange(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        return concat(defer((/**\n         * @return {?}\n         */\n        () => this.get(key, interpolateParams))), this.onTranslationChange.pipe(switchMap((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            /** @type {?} */\n            const res = this.getParsedResult(event.translations, key, interpolateParams);\n            if (typeof res.subscribe === 'function') {\n                return res;\n            }\n            else {\n                return of(res);\n            }\n        }))));\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the language changes.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?} A stream of the translated key, or an object of translated keys\n     */\n    stream(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        return concat(defer((/**\n         * @return {?}\n         */\n        () => this.get(key, interpolateParams))), this.onLangChange.pipe(switchMap((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            /** @type {?} */\n            const res = this.getParsedResult(event.translations, key, interpolateParams);\n            return isObservable(res) ? res : of(res);\n        }))));\n    }\n    /**\n     * Returns a translation instantly from the internal state of loaded translation.\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @return {?}\n     */\n    instant(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        /** @type {?} */\n        let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n        if (isObservable(res)) {\n            if (key instanceof Array) {\n                /** @type {?} */\n                let obj = {};\n                key.forEach((/**\n                 * @param {?} value\n                 * @param {?} index\n                 * @return {?}\n                 */\n                (value, index) => {\n                    obj[key[index]] = key[index];\n                }));\n                return obj;\n            }\n            return key;\n        }\n        else {\n            return res;\n        }\n    }\n    /**\n     * Sets the translated value of a key, after compiling it\n     * @param {?} key\n     * @param {?} value\n     * @param {?=} lang\n     * @return {?}\n     */\n    set(key, value, lang = this.currentLang) {\n        this.translations[lang][key] = this.compiler.compile(value, lang);\n        this.updateLangs();\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Changes the current lang\n     * @private\n     * @param {?} lang\n     * @return {?}\n     */\n    changeLang(lang) {\n        this.currentLang = lang;\n        this.onLangChange.emit({ lang: lang, translations: this.translations[lang] });\n        // if there is no default lang, use the one that we just set\n        if (this.defaultLang == null) {\n            this.changeDefaultLang(lang);\n        }\n    }\n    /**\n     * Changes the default lang\n     * @private\n     * @param {?} lang\n     * @return {?}\n     */\n    changeDefaultLang(lang) {\n        this.defaultLang = lang;\n        this.onDefaultLangChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Allows to reload the lang file from the file\n     * @param {?} lang\n     * @return {?}\n     */\n    reloadLang(lang) {\n        this.resetLang(lang);\n        return this.getTranslation(lang);\n    }\n    /**\n     * Deletes inner translation\n     * @param {?} lang\n     * @return {?}\n     */\n    resetLang(lang) {\n        this._translationRequests[lang] = undefined;\n        this.translations[lang] = undefined;\n    }\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     * @return {?}\n     */\n    getBrowserLang() {\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n        /** @type {?} */\n        let browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n        if (typeof browserLang === 'undefined') {\n            return undefined;\n        }\n        if (browserLang.indexOf('-') !== -1) {\n            browserLang = browserLang.split('-')[0];\n        }\n        if (browserLang.indexOf('_') !== -1) {\n            browserLang = browserLang.split('_')[0];\n        }\n        return browserLang;\n    }\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     * @return {?}\n     */\n    getBrowserCultureLang() {\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n        /** @type {?} */\n        let browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n        return browserCultureLang;\n    }\n}\nTranslateService.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nTranslateService.ctorParameters = () => [\n    { type: TranslateStore },\n    { type: TranslateLoader },\n    { type: TranslateCompiler },\n    { type: TranslateParser },\n    { type: MissingTranslationHandler },\n    { type: Boolean, decorators: [{ type: Inject, args: [USE_DEFAULT_LANG,] }] },\n    { type: Boolean, decorators: [{ type: Inject, args: [USE_STORE,] }] },\n    { type: Boolean, decorators: [{ type: Inject, args: [USE_EXTEND,] }] },\n    { type: String, decorators: [{ type: Inject, args: [DEFAULT_LANGUAGE,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype.loadingTranslations;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype.pending;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._onTranslationChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._onLangChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._onDefaultLangChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._defaultLang;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._currentLang;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._langs;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._translations;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype._translationRequests;\n    /** @type {?} */\n    TranslateService.prototype.store;\n    /** @type {?} */\n    TranslateService.prototype.currentLoader;\n    /** @type {?} */\n    TranslateService.prototype.compiler;\n    /** @type {?} */\n    TranslateService.prototype.parser;\n    /** @type {?} */\n    TranslateService.prototype.missingTranslationHandler;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype.useDefaultLang;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype.isolate;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateService.prototype.extend;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TranslateDirective {\n    /**\n     * @param {?} translateService\n     * @param {?} element\n     * @param {?} _ref\n     */\n    constructor(translateService, element, _ref) {\n        this.translateService = translateService;\n        this.element = element;\n        this._ref = _ref;\n        // subscribe to onTranslationChange event, in case the translations of the current lang change\n        if (!this.onTranslationChangeSub) {\n            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                if (event.lang === this.translateService.currentLang) {\n                    this.checkNodes(true, event.translations);\n                }\n            }));\n        }\n        // subscribe to onLangChange event, in case the language changes\n        if (!this.onLangChangeSub) {\n            this.onLangChangeSub = this.translateService.onLangChange.subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                this.checkNodes(true, event.translations);\n            }));\n        }\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if (!this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                this.checkNodes(true);\n            }));\n        }\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    set translate(key) {\n        if (key) {\n            this.key = key;\n            this.checkNodes();\n        }\n    }\n    /**\n     * @param {?} params\n     * @return {?}\n     */\n    set translateParams(params) {\n        if (!equals(this.currentParams, params)) {\n            this.currentParams = params;\n            this.checkNodes(true);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() {\n        this.checkNodes();\n    }\n    /**\n     * @param {?=} forceUpdate\n     * @param {?=} translations\n     * @return {?}\n     */\n    checkNodes(forceUpdate = false, translations) {\n        /** @type {?} */\n        let nodes = this.element.nativeElement.childNodes;\n        // if the element is empty\n        if (!nodes.length) {\n            // we add the key as content\n            this.setContent(this.element.nativeElement, this.key);\n            nodes = this.element.nativeElement.childNodes;\n        }\n        for (let i = 0; i < nodes.length; ++i) {\n            /** @type {?} */\n            let node = nodes[i];\n            if (node.nodeType === 3) { // node type 3 is a text node\n                // node type 3 is a text node\n                /** @type {?} */\n                let key;\n                if (forceUpdate) {\n                    node.lastKey = null;\n                }\n                if (isDefined(node.lookupKey)) {\n                    key = node.lookupKey;\n                }\n                else if (this.key) {\n                    key = this.key;\n                }\n                else {\n                    /** @type {?} */\n                    let content = this.getContent(node);\n                    /** @type {?} */\n                    let trimmedContent = content.trim();\n                    if (trimmedContent.length) {\n                        node.lookupKey = trimmedContent;\n                        // we want to use the content as a key, not the translation value\n                        if (content !== node.currentValue) {\n                            key = trimmedContent;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = content || node.originalContent;\n                        }\n                        else if (node.originalContent) { // the content seems ok, but the lang has changed\n                            // the current content is the translation, not the key, use the last real content as key\n                            key = node.originalContent.trim();\n                        }\n                        else if (content !== node.currentValue) {\n                            // we want to use the content as a key, not the translation value\n                            key = trimmedContent;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = content || node.originalContent;\n                        }\n                    }\n                }\n                this.updateValue(key, node, translations);\n            }\n        }\n    }\n    /**\n     * @param {?} key\n     * @param {?} node\n     * @param {?} translations\n     * @return {?}\n     */\n    updateValue(key, node, translations) {\n        if (key) {\n            if (node.lastKey === key && this.lastParams === this.currentParams) {\n                return;\n            }\n            this.lastParams = this.currentParams;\n            /** @type {?} */\n            let onTranslation = (/**\n             * @param {?} res\n             * @return {?}\n             */\n            (res) => {\n                if (res !== key) {\n                    node.lastKey = key;\n                }\n                if (!node.originalContent) {\n                    node.originalContent = this.getContent(node);\n                }\n                node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n                // we replace in the original content to preserve spaces that we might have trimmed\n                this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n                this._ref.markForCheck();\n            });\n            if (isDefined(translations)) {\n                /** @type {?} */\n                let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n                if (isObservable(res)) {\n                    res.subscribe(onTranslation);\n                }\n                else {\n                    onTranslation(res);\n                }\n            }\n            else {\n                this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n            }\n        }\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    getContent(node) {\n        return isDefined(node.textContent) ? node.textContent : node.data;\n    }\n    /**\n     * @param {?} node\n     * @param {?} content\n     * @return {?}\n     */\n    setContent(node, content) {\n        if (isDefined(node.textContent)) {\n            node.textContent = content;\n        }\n        else {\n            node.data = content;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.onLangChangeSub) {\n            this.onLangChangeSub.unsubscribe();\n        }\n        if (this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub.unsubscribe();\n        }\n        if (this.onTranslationChangeSub) {\n            this.onTranslationChangeSub.unsubscribe();\n        }\n    }\n}\nTranslateDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[translate],[ngx-translate]'\n            },] }\n];\n/** @nocollapse */\nTranslateDirective.ctorParameters = () => [\n    { type: TranslateService },\n    { type: ElementRef },\n    { type: ChangeDetectorRef }\n];\nTranslateDirective.propDecorators = {\n    translate: [{ type: Input }],\n    translateParams: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    TranslateDirective.prototype.key;\n    /** @type {?} */\n    TranslateDirective.prototype.lastParams;\n    /** @type {?} */\n    TranslateDirective.prototype.currentParams;\n    /** @type {?} */\n    TranslateDirective.prototype.onLangChangeSub;\n    /** @type {?} */\n    TranslateDirective.prototype.onDefaultLangChangeSub;\n    /** @type {?} */\n    TranslateDirective.prototype.onTranslationChangeSub;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateDirective.prototype.translateService;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateDirective.prototype.element;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslateDirective.prototype._ref;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TranslatePipe {\n    /**\n     * @param {?} translate\n     * @param {?} _ref\n     */\n    constructor(translate, _ref) {\n        this.translate = translate;\n        this._ref = _ref;\n        this.value = '';\n    }\n    /**\n     * @param {?} key\n     * @param {?=} interpolateParams\n     * @param {?=} translations\n     * @return {?}\n     */\n    updateValue(key, interpolateParams, translations) {\n        /** @type {?} */\n        let onTranslation = (/**\n         * @param {?} res\n         * @return {?}\n         */\n        (res) => {\n            this.value = res !== undefined ? res : key;\n            this.lastKey = key;\n            this._ref.markForCheck();\n        });\n        if (translations) {\n            /** @type {?} */\n            let res = this.translate.getParsedResult(translations, key, interpolateParams);\n            if (isObservable(res.subscribe)) {\n                res.subscribe(onTranslation);\n            }\n            else {\n                onTranslation(res);\n            }\n        }\n        this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n    /**\n     * @param {?} query\n     * @param {...?} args\n     * @return {?}\n     */\n    transform(query, ...args) {\n        if (!query || !query.length) {\n            return query;\n        }\n        // if we ask another time for the same key, return the last value\n        if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n            return this.value;\n        }\n        /** @type {?} */\n        let interpolateParams;\n        if (isDefined(args[0]) && args.length) {\n            if (typeof args[0] === 'string' && args[0].length) {\n                // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n                // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n                /** @type {?} */\n                let validArgs = args[0]\n                    .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\n                    .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n                try {\n                    interpolateParams = JSON.parse(validArgs);\n                }\n                catch (e) {\n                    throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n                }\n            }\n            else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n                interpolateParams = args[0];\n            }\n        }\n        // store the query, in case it changes\n        this.lastKey = query;\n        // store the params, in case they change\n        this.lastParams = args;\n        // set the value\n        this.updateValue(query, interpolateParams);\n        // if there is a subscription to onLangChange, clean it\n        this._dispose();\n        // subscribe to onTranslationChange event, in case the translations change\n        if (!this.onTranslationChange) {\n            this.onTranslationChange = this.translate.onTranslationChange.subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                if (this.lastKey && event.lang === this.translate.currentLang) {\n                    this.lastKey = null;\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            }));\n        }\n        // subscribe to onLangChange event, in case the language changes\n        if (!this.onLangChange) {\n            this.onLangChange = this.translate.onLangChange.subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            (event) => {\n                if (this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            }));\n        }\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if (!this.onDefaultLangChange) {\n            this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe((/**\n             * @return {?}\n             */\n            () => {\n                if (this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams);\n                }\n            }));\n        }\n        return this.value;\n    }\n    /**\n     * Clean any existing subscription to change events\n     * @private\n     * @return {?}\n     */\n    _dispose() {\n        if (typeof this.onTranslationChange !== 'undefined') {\n            this.onTranslationChange.unsubscribe();\n            this.onTranslationChange = undefined;\n        }\n        if (typeof this.onLangChange !== 'undefined') {\n            this.onLangChange.unsubscribe();\n            this.onLangChange = undefined;\n        }\n        if (typeof this.onDefaultLangChange !== 'undefined') {\n            this.onDefaultLangChange.unsubscribe();\n            this.onDefaultLangChange = undefined;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._dispose();\n    }\n}\nTranslatePipe.decorators = [\n    { type: Injectable },\n    { type: Pipe, args: [{\n                name: 'translate',\n                pure: false // required to update the value when the promise is resolved\n            },] }\n];\n/** @nocollapse */\nTranslatePipe.ctorParameters = () => [\n    { type: TranslateService },\n    { type: ChangeDetectorRef }\n];\nif (false) {\n    /** @type {?} */\n    TranslatePipe.prototype.value;\n    /** @type {?} */\n    TranslatePipe.prototype.lastKey;\n    /** @type {?} */\n    TranslatePipe.prototype.lastParams;\n    /** @type {?} */\n    TranslatePipe.prototype.onTranslationChange;\n    /** @type {?} */\n    TranslatePipe.prototype.onLangChange;\n    /** @type {?} */\n    TranslatePipe.prototype.onDefaultLangChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslatePipe.prototype.translate;\n    /**\n     * @type {?}\n     * @private\n     */\n    TranslatePipe.prototype._ref;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction TranslateModuleConfig() { }\nif (false) {\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.loader;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.compiler;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.parser;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.missingTranslationHandler;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.isolate;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.extend;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.useDefaultLang;\n    /** @type {?|undefined} */\n    TranslateModuleConfig.prototype.defaultLanguage;\n}\nclass TranslateModule {\n    /**\n     * Use this method in your root module to provide the TranslateService\n     * @param {?=} config\n     * @return {?}\n     */\n    static forRoot(config = {}) {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\n                TranslateStore,\n                { provide: USE_STORE, useValue: config.isolate },\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\n                { provide: USE_EXTEND, useValue: config.extend },\n                { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\n                TranslateService\n            ]\n        };\n    }\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     * @param {?=} config\n     * @return {?}\n     */\n    static forChild(config = {}) {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\n                { provide: USE_STORE, useValue: config.isolate },\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\n                { provide: USE_EXTEND, useValue: config.extend },\n                { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\n                TranslateService\n            ]\n        };\n    }\n}\nTranslateModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    TranslatePipe,\n                    TranslateDirective\n                ],\n                exports: [\n                    TranslatePipe,\n                    TranslateDirective\n                ]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DEFAULT_LANGUAGE, FakeMissingTranslationHandler, MissingTranslationHandler, TranslateCompiler, TranslateDefaultParser, TranslateDirective, TranslateFakeCompiler, TranslateFakeLoader, TranslateLoader, TranslateModule, TranslateParser, TranslatePipe, TranslateService, TranslateStore, USE_DEFAULT_LANG, USE_EXTEND, USE_STORE };\n//# sourceMappingURL=ngx-translate-core.js.map\n","class TranslateHttpLoader {\n    constructor(http, prefix = \"/assets/i18n/\", suffix = \".json\") {\n        this.http = http;\n        this.prefix = prefix;\n        this.suffix = suffix;\n    }\n    /**\n     * Gets the translations from the server\n     */\n    getTranslation(lang) {\n        return this.http.get(`${this.prefix}${lang}${this.suffix}`);\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TranslateHttpLoader };\n//# sourceMappingURL=ngx-translate-http-loader.js.map\n","export default \"<ion-content class=\\\"ion-padding\\\">\\n  <div class=\\\"login-logo\\\">\\n    <img src=\\\"../../../assets/images/paj-logo.png\\\">\\n  </div>\\n  <div class=\\\"field-box\\\">\\n    <!-- {{ 'HOME.text' | translate }} -->\\n    <ion-list>\\n      <form #f=\\\"ngForm\\\" (ngSubmit)=\\\"login(f)\\\">\\n        <ion-item>\\n          <ion-icon class=\\\"flaticon-email\\\" slot=\\\"start\\\"></ion-icon>\\n          <ion-input type=\\\"text\\\" placeholder=\\\"Email\\\" ngModel name=\\\"email\\\" [(ngModel)]=\\\"email\\\" required class=\\\"ion-margin-start\\\"></ion-input>\\n        </ion-item>\\n        <ion-item>\\n          <ion-icon class=\\\"flaticon-key\\\" slot=\\\"start\\\"></ion-icon>\\n          <ion-input [type]=\\\"passwordType\\\" placeholder=\\\"Password\\\" ngModel name=\\\"password\\\" [(ngModel)]=\\\"password\\\" required class=\\\"ion-margin-start\\\"></ion-input>\\n          <ion-icon [name]=\\\"passwordIcon\\\" (click)='hideShowPassword()' slot=\\\"end\\\"></ion-icon>\\n        </ion-item>\\n        <ion-item>\\n          <ion-icon class=\\\"flaticon-world\\\" slot=\\\"start\\\"></ion-icon>\\n          <ion-label>Language</ion-label>\\n          <ion-select placeholder=\\\"Select One\\\" name=\\\"language\\\" [(ngModel)]=\\\"selectedLanguage\\\" (ionChange)=\\\"languageChanged()\\\">\\n            <ion-select-option value=\\\"en\\\">English</ion-select-option>\\n            <ion-select-option value=\\\"ko\\\">Korean</ion-select-option>\\n          </ion-select>\\n        </ion-item>\\n      </form>\\n      <ion-item class=\\\"login-link ion-text-center\\\">\\n        Forgot Your <a href=\\\"javascript:void(0);\\\" (click)=\\\"vergessenPasswort()\\\"> Password?</a> \\n      </ion-item>\\n    </ion-list>\\n  </div>\\n</ion-content>\\n<ion-footer>\\n  <ion-toolbar>\\n    <ion-button expand=\\\"block\\\" size=\\\"large\\\" [disabled]=\\\"!f.valid\\\" (click)=\\\"login(f);\\\">\\n      Login <ion-icon class=\\\"flaticon-arrow-pointing-to-right\\\"></ion-icon>\\n    </ion-button>\\n  </ion-toolbar>\\n</ion-footer>\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\nimport { IonicModule } from '@ionic/angular';\nimport { LoginPage } from './login.page';\nimport { LanguageModule } from 'src/app/shared/language/language.module';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [\n    LanguageModule,\n    TranslateModule,\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule {}\n","export default \"ion-header {\\n  padding: 10px;\\n}\\nion-header ion-toolbar {\\n  --background: transparent;\\n}\\nion-content ion-input {\\n  --padding-top: 11px;\\n}\\nion-content::after {\\n  content: \\\"\\\";\\n  background: url('splash.jpg') no-repeat 52% center/cover;\\n  position: fixed;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n  z-index: 1;\\n}\\nion-content .login-logo {\\n  text-align: center;\\n  padding: 50px 0 0;\\n  position: relative;\\n  z-index: 2;\\n}\\nion-content .login-logo img {\\n  width: 200px;\\n}\\n.field-box {\\n  color: var(--white);\\n  padding: 20px;\\n  position: relative;\\n  z-index: 2;\\n}\\n.field-box ion-list {\\n  background: transparent;\\n}\\n.field-box ion-list ion-item {\\n  display: block;\\n  --background: rgba(255, 255, 255, 0.2);\\n  --color: var(--white);\\n  border-radius: 5px;\\n  opacity: 10;\\n  margin-bottom: 13px;\\n}\\n.field-box ion-list ion-item ion-icon {\\n  color: var(--white);\\n  margin-right: 6px;\\n  font-size: 17px;\\n  line-height: 18px;\\n  width: 24px;\\n  line-height: 18px;\\n}\\n.field-box ion-list ion-item .flaticon-visibility-button {\\n  margin: 0;\\n  color: #a49d9d;\\n}\\n.field-box ion-list ion-item.login-link {\\n  --background: transparent;\\n  color: var(--white);\\n  text-align: center;\\n  margin: 0 auto;\\n  display: block;\\n  width: 100%;\\n}\\n.field-box ion-list ion-item.login-link .item-inner {\\n  --text-align: center;\\n}\\n.field-box ion-list ion-item.login-link a {\\n  margin: 0 0 0 6px;\\n}\\n.field-box ion-list ion-select {\\n  width: 100%;\\n  display: contents;\\n}\\nion-footer {\\n  padding: 10px;\\n}\\nion-footer ion-toolbar {\\n  --background: transparent;\\n}\\nion-footer ion-toolbar ion-button {\\n  text-transform: capitalize;\\n  font-weight: normal;\\n  font-size: 17px;\\n}\\nion-footer ion-toolbar ion-button ion-icon {\\n  font-size: 16px;\\n  margin: 4px 0 0 5px;\\n  width: 29px;\\n  height: 20px;\\n  vertical-align: middle;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YXIvd3d3L2h0bWwvZGF0YWxvZ3kvcGFqcG9ydGFsdjIvc3JjL2FwcC9wdWJsaWMvbG9naW4vbG9naW4ucGFnZS5zY3NzIiwic3JjL2FwcC9wdWJsaWMvbG9naW4vbG9naW4ucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBO0VBQ0ksYUFBQTtBQ0FKO0FEQ0k7RUFDSSx5QkFBQTtBQ0NSO0FEaUJJO0VBQ0ksbUJBQUE7QUNkUjtBRGdCSTtFQUNJLFdBQUE7RUFDQSx3REFBQTtFQUNBLGVBQUE7RUFBaUIsTUFBQTtFQUFRLFFBQUE7RUFBVSxTQUFBO0VBQVcsT0FBQTtFQUFRLFVBQUE7QUNUOUQ7QURZSTtFQUNJLGtCQUFBO0VBQ0EsaUJBQUE7RUFDQSxrQkFBQTtFQUNBLFVBQUE7QUNWUjtBRFdRO0VBQ0ksWUFBQTtBQ1RaO0FEY0E7RUFDSSxtQkFBQTtFQUNBLGFBQUE7RUFDQSxrQkFBQTtFQUNBLFVBQUE7QUNYSjtBRGFJO0VBQ0ksdUJBQUE7QUNYUjtBRFlRO0VBQ0ksY0FBQTtFQUNBLHNDQUFBO0VBQ0EscUJBQUE7RUFDQSxrQkFBQTtFQUNBLFdBQUE7RUFDQSxtQkFBQTtBQ1ZaO0FEV1k7RUFDSSxtQkFBQTtFQUNBLGlCQUFBO0VBQ0EsZUFBQTtFQUNBLGlCQUFBO0VBRUEsV0FBQTtFQUNBLGlCQUFBO0FDVmhCO0FEWVk7RUFDSSxTQUFBO0VBQ0EsY0FBQTtBQ1ZoQjtBRFlZO0VBQ0kseUJBQUE7RUFDQSxtQkFBQTtFQUNBLGtCQUFBO0VBQ0EsY0FBQTtFQUNBLGNBQUE7RUFDQSxXQUFBO0FDVmhCO0FEV2dCO0VBQ0ksb0JBQUE7QUNUcEI7QURXZ0I7RUFDSSxpQkFBQTtBQ1RwQjtBRGFRO0VBQ0ksV0FBQTtFQUNBLGlCQUFBO0FDWFo7QURnQkE7RUFDSSxhQUFBO0FDYko7QURjSTtFQUNJLHlCQUFBO0FDWlI7QURjUTtFQUNJLDBCQUFBO0VBQ0EsbUJBQUE7RUFDQSxlQUFBO0FDWlo7QURhWTtFQUNJLGVBQUE7RUFDQSxtQkFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0Esc0JBQUE7QUNYaEIiLCJmaWxlIjoic3JjL2FwcC9wdWJsaWMvbG9naW4vbG9naW4ucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pb24taGVhZGVye1xuICAgIHBhZGRpbmc6IDEwcHg7IFxuICAgIGlvbi10b29sYmFye1xuICAgICAgICAtLWJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgICAgICBcbiAgICAgICAgLy8gaW9uLWJ1dHRvbntcbiAgICAgICAgLy8gICAgIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xuICAgICAgICAvLyAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICAgICAgLy8gICAgIGZvbnQtc2l6ZTogMTdweDtcbiAgICAgICAgLy8gICAgIGlvbi1pY29ue1xuICAgICAgICAvLyAgICAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgICAgLy8gICAgICAgICBtYXJnaW46IDAgMCAwIDdweDtcbiAgICAgICAgLy8gICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9XG4gICAgfVxufVxuXG5cblxuaW9uLWNvbnRlbnR7XG4gICAgaW9uLWlucHV0IHtcbiAgICAgICAgLS1wYWRkaW5nLXRvcDogMTFweDtcbiAgICB9XG4gICAgJjo6YWZ0ZXJ7XG4gICAgICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgICAgIGJhY2tncm91bmQ6IHVybCguLi8uLi8uLi9hc3NldHMvaW1hZ2VzL3NwbGFzaC5qcGcpIG5vLXJlcGVhdCA1MiUgY2VudGVyL2NvdmVyO1xuICAgICAgICBwb3NpdGlvbjogZml4ZWQ7IHRvcDogMDsgcmlnaHQ6IDA7IGJvdHRvbTogMDsgbGVmdDogMDt6LWluZGV4OjE7XG4gICAgfVxuICAgXG4gICAgLmxvZ2luLWxvZ297XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgcGFkZGluZzogNTBweCAwIDA7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgei1pbmRleDogMjtcbiAgICAgICAgaW1ne1xuICAgICAgICAgICAgd2lkdGg6IDIwMHB4O1xuICAgICAgICB9XG4gICAgfVxuICBcbn1cbi5maWVsZC1ib3h7XG4gICAgY29sb3I6IHZhcigtLXdoaXRlKTtcbiAgICBwYWRkaW5nOiAyMHB4O1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB6LWluZGV4OiAyO1xuXG4gICAgaW9uLWxpc3R7XG4gICAgICAgIGJhY2tncm91bmQ6dHJhbnNwYXJlbnQ7XG4gICAgICAgIGlvbi1pdGVte1xuICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICAtLWJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcbiAgICAgICAgICAgIC0tY29sb3I6IHZhcigtLXdoaXRlKTtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICAgICAgICAgIG9wYWNpdHk6IDEwO1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTNweDtcbiAgICAgICAgICAgIGlvbi1pY29ue1xuICAgICAgICAgICAgICAgIGNvbG9yOiB2YXIoLS13aGl0ZSk7XG4gICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA2cHg7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAxN3B4O1xuICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxOHB4O1xuICAgICAgICAgICAgICAgIC8vIGhlaWdodDogMjRweDtcbiAgICAgICAgICAgICAgICB3aWR0aDogMjRweDtcbiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMThweDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC5mbGF0aWNvbi12aXNpYmlsaXR5LWJ1dHRvbntcbiAgICAgICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICAgICAgY29sb3I6ICNhNDlkOWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAmLmxvZ2luLWxpbmt7XG4gICAgICAgICAgICAgICAgLS1iYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICAgICAgICBjb2xvcjogdmFyKC0td2hpdGUpO1xuICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBtYXJnaW46MCBhdXRvO1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgIC5pdGVtLWlubmVye1xuICAgICAgICAgICAgICAgICAgICAtLXRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXtcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwIDAgMCA2cHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlvbi1zZWxlY3R7XG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgIGRpc3BsYXk6IGNvbnRlbnRzOyAgIFxuICAgICAgICB9XG4gICAgfVxufVxuXG5pb24tZm9vdGVye1xuICAgIHBhZGRpbmc6IDEwcHg7IFxuICAgIGlvbi10b29sYmFye1xuICAgICAgICAtLWJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgICAgICBcbiAgICAgICAgaW9uLWJ1dHRvbntcbiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTdweDtcbiAgICAgICAgICAgIGlvbi1pY29ue1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgICAgICAgICAgICBtYXJnaW46IDRweCAwIDAgNXB4O1xuICAgICAgICAgICAgICAgIHdpZHRoOiAyOXB4O1xuICAgICAgICAgICAgICAgIGhlaWdodDogMjBweDtcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4iLCJpb24taGVhZGVyIHtcbiAgcGFkZGluZzogMTBweDtcbn1cbmlvbi1oZWFkZXIgaW9uLXRvb2xiYXIge1xuICAtLWJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xufVxuXG5pb24tY29udGVudCBpb24taW5wdXQge1xuICAtLXBhZGRpbmctdG9wOiAxMXB4O1xufVxuaW9uLWNvbnRlbnQ6OmFmdGVyIHtcbiAgY29udGVudDogXCJcIjtcbiAgYmFja2dyb3VuZDogdXJsKC4uLy4uLy4uL2Fzc2V0cy9pbWFnZXMvc3BsYXNoLmpwZykgbm8tcmVwZWF0IDUyJSBjZW50ZXIvY292ZXI7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdG9wOiAwO1xuICByaWdodDogMDtcbiAgYm90dG9tOiAwO1xuICBsZWZ0OiAwO1xuICB6LWluZGV4OiAxO1xufVxuaW9uLWNvbnRlbnQgLmxvZ2luLWxvZ28ge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHBhZGRpbmc6IDUwcHggMCAwO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHotaW5kZXg6IDI7XG59XG5pb24tY29udGVudCAubG9naW4tbG9nbyBpbWcge1xuICB3aWR0aDogMjAwcHg7XG59XG5cbi5maWVsZC1ib3gge1xuICBjb2xvcjogdmFyKC0td2hpdGUpO1xuICBwYWRkaW5nOiAyMHB4O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHotaW5kZXg6IDI7XG59XG4uZmllbGQtYm94IGlvbi1saXN0IHtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG59XG4uZmllbGQtYm94IGlvbi1saXN0IGlvbi1pdGVtIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIC0tYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xuICAtLWNvbG9yOiB2YXIoLS13aGl0ZSk7XG4gIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgb3BhY2l0eTogMTA7XG4gIG1hcmdpbi1ib3R0b206IDEzcHg7XG59XG4uZmllbGQtYm94IGlvbi1saXN0IGlvbi1pdGVtIGlvbi1pY29uIHtcbiAgY29sb3I6IHZhcigtLXdoaXRlKTtcbiAgbWFyZ2luLXJpZ2h0OiA2cHg7XG4gIGZvbnQtc2l6ZTogMTdweDtcbiAgbGluZS1oZWlnaHQ6IDE4cHg7XG4gIHdpZHRoOiAyNHB4O1xuICBsaW5lLWhlaWdodDogMThweDtcbn1cbi5maWVsZC1ib3ggaW9uLWxpc3QgaW9uLWl0ZW0gLmZsYXRpY29uLXZpc2liaWxpdHktYnV0dG9uIHtcbiAgbWFyZ2luOiAwO1xuICBjb2xvcjogI2E0OWQ5ZDtcbn1cbi5maWVsZC1ib3ggaW9uLWxpc3QgaW9uLWl0ZW0ubG9naW4tbGluayB7XG4gIC0tYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIGNvbG9yOiB2YXIoLS13aGl0ZSk7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgbWFyZ2luOiAwIGF1dG87XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB3aWR0aDogMTAwJTtcbn1cbi5maWVsZC1ib3ggaW9uLWxpc3QgaW9uLWl0ZW0ubG9naW4tbGluayAuaXRlbS1pbm5lciB7XG4gIC0tdGV4dC1hbGlnbjogY2VudGVyO1xufVxuLmZpZWxkLWJveCBpb24tbGlzdCBpb24taXRlbS5sb2dpbi1saW5rIGEge1xuICBtYXJnaW46IDAgMCAwIDZweDtcbn1cbi5maWVsZC1ib3ggaW9uLWxpc3QgaW9uLXNlbGVjdCB7XG4gIHdpZHRoOiAxMDAlO1xuICBkaXNwbGF5OiBjb250ZW50cztcbn1cblxuaW9uLWZvb3RlciB7XG4gIHBhZGRpbmc6IDEwcHg7XG59XG5pb24tZm9vdGVyIGlvbi10b29sYmFyIHtcbiAgLS1iYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbn1cbmlvbi1mb290ZXIgaW9uLXRvb2xiYXIgaW9uLWJ1dHRvbiB7XG4gIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXNpemU6IDE3cHg7XG59XG5pb24tZm9vdGVyIGlvbi10b29sYmFyIGlvbi1idXR0b24gaW9uLWljb24ge1xuICBmb250LXNpemU6IDE2cHg7XG4gIG1hcmdpbjogNHB4IDAgMCA1cHg7XG4gIHdpZHRoOiAyOXB4O1xuICBoZWlnaHQ6IDIwcHg7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG59Il19 */\"","import { AuthenticationService } from './../../services/authentication.service';\nimport { Component, OnInit } from '@angular/core';\nimport { LoadingController, ToastController } from '@ionic/angular';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Platform } from '@ionic/angular';\nimport {Constants} from '../../constants.enum';\nimport { Storage } from '@ionic/storage';\nimport { TranslateConfigService } from 'src/app/translate-config.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage implements OnInit {\n\n  passwordType = 'password';\n  passwordIcon = 'eye';\n  // email: string = 'testkunde@paj-gps.de';\n  // password: string = 'app123#.';\n  email: string = '';\n  password: string = '';\n  subscription;\n  selectedLanguage:string;\n\n  constructor(\n    private authService: AuthenticationService,\n    public loadingCtrl: LoadingController,\n    public toastCtrl: ToastController,\n    private router: Router,\n    private platform: Platform,\n    private authenticationService: AuthenticationService,\n    private storage: Storage,\n    private translateConfigService: TranslateConfigService) {\n      this.selectedLanguage = this.translateConfigService.getDefaultLanguage();\n  }\n\n  languageChanged() {\n    this.translateConfigService.setLanguage(this.selectedLanguage);\n  }\n\n  ngOnInit() {\n  }\n\n  ionViewWillLeave() {\n    this.subscription.unsubscribe();\n  }\n\n  async ionViewWillEnter() {\n    // console.log('View Called');\n    this.subscription = this.platform.backButton.subscribe(()=>{\n      navigator['app'].exitApp();\n    });\n  }\n\n  async login(form: NgForm) {\n    // this.authService.login();\n    // const loading = await this.loadingCtrl.create({\n    //   message: 'Please Wait',\n    //   translucent: true,\n    // });\n    // await loading.present();\n    this.storage.set(Constants.MAP, 'osm');  // by default open street maps\n    this.storage.set(Constants.ROUTE_ICON, 'circle'); // bydefault its circle\n    this.storage.set(Constants.UPDATE_MAP, 0);\n    this.storage.set(Constants.UPDATE_STYLE, 0);\n    await this.authService.login(form.value.email, form.value.password);\n    // await this.authenticationService.authenticationState.subscribe(state => {\n    // });\n    // loading.dismiss();\n    this.email = '';\n    this.password = '';\n    // console.log(data);\n  }\n\n  vergessenPasswort() {\n    this.router.navigate(['/forget-password']);\n  }\n\n  hideShowPassword() {\n    this.passwordType = this.passwordType === 'text' ? 'password' : 'text';\n    this.passwordIcon = this.passwordIcon === 'eye-off' ? 'eye' : 'eye-off';\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// Multiple Language\nimport { HttpClient } from '@angular/common/http';\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { TranslateConfigService } from './../../translate-config.service';\nexport function LanguageLoader(http: HttpClient) {\n  return new TranslateHttpLoader(http, 'assets/i18n/', '.json');\n}\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: (LanguageLoader),\n        deps: [HttpClient]\n      }\n    }),\n  ],\n  providers: [TranslateConfigService]\n})\nexport class LanguageModule { }\n","import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TranslateConfigService {\n\n  constructor(private translate: TranslateService) { }\n\n  getDefaultLanguage(){\n    const language = this.translate.getBrowserLang();\n    this.translate.setDefaultLang(language);\n    return language;\n  }\n\n  setLanguage(setLang) {\n    this.translate.use(setLang);\n  }\n\n}\n"],"sourceRoot":"webpack:///","file":"public-login-login-module-es5.js"}
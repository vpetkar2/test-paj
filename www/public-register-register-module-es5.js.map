{"version":3,"sources":["src/app/public/register/register.page.html","src/app/public/register/register.module.ts","src/app/public/register/register.page.scss","src/app/public/register/register.page.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"dark\\\" mode=\\\"ios\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n        <ion-back-button defaultHref=\\\"/dashboard\\\"></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>Register</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n \\n<ion-content padding>\\n    <ion-grid> \\n        <ion-row>\\n            <ion-col size-md=\\\"6\\\" offset-md=\\\"3\\\">\\n              <ion-list >\\n                <form #f=\\\"ngForm\\\" novalidate (ngSubmit)=\\\"register(f)\\\" [formGroup]=\\\"registerForm\\\">\\n                  <ion-item no-padding>\\n                    <ion-input type=\\\"text\\\"  formControlName=\\\"name\\\" placeholder=\\\"Name\\\" [(ngModel)]=\\\"username\\\" name=\\\"name\\\" required></ion-input>\\n                  </ion-item>\\n                  <div class=\\\"validation-errors\\\">\\n                    <ng-container *ngFor=\\\"let validation of validationMessages.name\\\">\\n                      <div class=\\\"error-message\\\" *ngIf=\\\"registerForm.get('name').hasError(validation.type) && (registerForm.get('name').dirty || registerForm.get('name').touched)\\\">\\n                        {{ validation.message }}\\n                      </div>\\n                    </ng-container>\\n                  </div>\\n\\n                  <ion-item no-padding>\\n                    <ion-input type=\\\"email\\\" formControlName=\\\"email\\\"  placeholder=\\\"Email\\\" name=\\\"email\\\" [(ngModel)]=\\\"email\\\" required></ion-input>\\n                  </ion-item>\\n                  <div class=\\\"validation-errors\\\">\\n                      <ng-container *ngFor=\\\"let validation of validationMessages.email\\\">\\n                        <div class=\\\"error-message\\\" *ngIf=\\\"registerForm.get('email').hasError(validation.type) && (registerForm.get('email').dirty || registerForm.get('email').touched)\\\">\\n                          {{ validation.message }}\\n                        </div>\\n                      </ng-container>\\n                    </div>\\n\\n                  <ion-item no-padding>\\n                    <ion-input  type=\\\"password\\\" formControlName=\\\"password\\\" placeholder=\\\"Password\\\"  name=\\\"password\\\" [(ngModel)]=\\\"password\\\" required></ion-input>\\n                  </ion-item>\\n                  <div class=\\\"validation-errors\\\">\\n                      <ng-container *ngFor=\\\"let validation of validationMessages.password\\\">\\n                        <div class=\\\"error-message\\\" *ngIf=\\\"registerForm.get('password').hasError(validation.type) && (registerForm.get('password').dirty || registerForm.get('password').touched)\\\">\\n                          {{ validation.message }}\\n                        </div>\\n                      </ng-container>\\n                    </div>\\n\\n                  <ion-item no-padding>\\n                      <ion-input  type=\\\"password\\\" formControlName=\\\"c_password\\\" placeholder=\\\"Confirm Password\\\"  name=\\\"c_password\\\" [(ngModel)]=\\\"cPassword\\\" required></ion-input>\\n                    </ion-item>\\n                    <div class=\\\"validation-errors\\\">\\n                        <ng-container *ngFor=\\\"let validation of validationMessages.c_password\\\">\\n                          <div class=\\\"error-message\\\" *ngIf=\\\"registerForm.get('c_password').hasError(validation.type) && (registerForm.get('c_password').dirty || registerForm.get('c_password').touched)\\\">\\n                            {{ validation.message }}\\n                          </div>\\n                        </ng-container>\\n                      </div>\\n                  \\n                  <ion-button  expand=\\\"block\\\" color=\\\"secondary\\\"  type=\\\"submit\\\" [disabled]=\\\"!f.valid\\\">Register</ion-button>\\n                </form>\\n              </ion-list>\\n            </ion-col>\\n        </ion-row>\\n    </ion-grid>\\n</ion-content>\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { RegisterPage } from './register.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes),\n    ReactiveFormsModule\n  ],\n  declarations: [RegisterPage]\n})\nexport class RegisterPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3B1YmxpYy9yZWdpc3Rlci9yZWdpc3Rlci5wYWdlLnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { AuthenticationService } from './../../services/authentication.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { LoadingController } from '@ionic/angular';\n\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss'],\n})\nexport class RegisterPage implements OnInit {\n  public registerForm: FormGroup;\n  email: string;\n  username: string;\n  password: string;\n  cPassword: string;\n\n  validationMessages = {\n    'email': [\n        { type: 'required', message: 'Email is required.' },\n        { type: 'minlength', message: 'Email must be at least 5 characters long.' },\n        { type: 'maxlength', message: 'Email cannot be more than 30 characters long.' }\n      ],\n    'name': [\n      { type: 'required', message: 'Name is required.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 8 characters long.' }\n    ],\n    'c_password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 8 characters long.' }\n    ],\n  };\n  constructor(private authService: AuthenticationService, public formBuilder: FormBuilder, public loadingCtrl: LoadingController) {\n    this.registerForm = formBuilder.group({\n      name: ['', Validators.compose([Validators.maxLength(30),  Validators.pattern('[a-zA-Z ]*'), Validators.required])],\n      email: ['', Validators.compose([Validators.maxLength(30), Validators.minLength(5), Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'), Validators.required])],\n      password: ['', Validators.compose([Validators.minLength(8), Validators.required])],\n      c_password: ['', Validators.compose([Validators.minLength(8), Validators.required])]\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  async register(form) {\n    const loading = await this.loadingCtrl.create({\n      message: 'Please Wait',\n      translucent: true,\n    });\n    await loading.present();\n    this.authService.register(form.value.name, form.value.email, form.value.password);\n    loading.dismiss();\n    this.email = '';\n    this.username = '';\n    this.password = '';\n    this.cPassword = '';\n  }\n\n}\n"],"sourceRoot":"webpack:///","file":"public-register-register-module-es5.js"}